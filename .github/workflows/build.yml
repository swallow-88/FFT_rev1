# .github/workflows/build.yml

name: Build & Release FFTApp APK

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      ANDROID_HOME:     /usr/local/lib/android/sdk
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install apt packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential git zip unzip wget curl \
            python3-pip python3-dev ant \
            cmake ninja-build autoconf automake libtool pkg-config \
            openjdk-11-jdk-headless

      - name: Configure Android SDK paths
        run: |
          echo "ANDROID_HOME=${ANDROID_HOME}" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/tools/bin"           >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/platform-tools"      >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/emulator"            >> $GITHUB_PATH

      - name: Symlink sdkmanager for Buildozer
        run: |
          mkdir -p $ANDROID_SDK_ROOT/tools/bin
          ln -sf $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
                   $ANDROID_SDK_ROOT/tools/bin/sdkmanager

      - name: Verify sdkmanager
        run: |
          which sdkmanager
          sdkmanager --version

      - name: Install required Android SDK components
        run: |
          yes | sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --licenses
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "ndk;25.2.9519653" \
            "cmake;3.22.1" \
            "extras;google;m2repository" \
            "extras;android;m2repository"



        # 10) packaging & setuptools 버전 고정
      - name: packaging & setuptools 고정
        run: |
          python3 -m pip install --upgrade pip
          # packaging 20.9 로 하향( strip_trailing_zero 지원 )
          pip install setuptools==65.5.0 packaging==20.9 wheel

      # 11) Buildozer & python-for-android 설치
      # 11) Buildozer & python-for-android 설치
      # Install Buildozer & python-for-android
      - name: Buildozer & p4a 설치
        run: |
          pip install cython==0.29.34 buildozer==1.5.0
          # PyPI에 있는 최신 안정 버전으로 고정
          pip install python-for-android==2024.1.21


      # 12) Build APK (Debug) and capture logs
      - name: Build APK (Debug) and capture logs
        run: |
          buildozer android clean || true
          buildozer android debug --verbose | tee buildozer.log
        continue-on-error: true
        
      
      - name: Debug print all APK files
        run: |
          echo "▶ PWD = $PWD"
          find . -type f -name '*.apk' -print

      - name: Debug show build errors
        run: |
          echo "▶ buildozer.log 에서 ERROR 검색"
          grep -R "ERROR" buildozer.log || echo "ERROR 없음"
          echo "▶ buildozer.log 마지막 50줄"
          tail -n 50 buildozer.log

          
      # 14) 생성된 APK 위치 확인
      - name: Locate generated APK(s)
        run: |
          find . -type f -name '*.apk'

      # 15) APK 업로드

      - name: Upload APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: FFTApp-apks
          path: |
            .buildozer/android/platform/*/build/outputs/apk/debug/fftapp-debug.apk
          if-no-files-found: error
